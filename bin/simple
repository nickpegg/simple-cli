#!/usr/bin/env python3

import json
import sys
import time
from pprint import pprint

import click

import simplebank


@click.group()
@click.option('-u', 'username',
              help='Specify a username',
              default='',
              required=False)
@click.option('-p', 'password',
              help='Read password from stdin',
              is_flag=True)
@click.option('-o', 'output_format',
              help='Output format',
              default='human',
              type=click.Choice(['human', 'raw', 'pprint', 'json']),
              required=False)
@click.version_option(version=simplebank.__version__)
@click.help_option('-h')
@click.pass_context
def cli(ctx, username, password, output_format):
    # Get username and password
    if not username:
        username = click.prompt('Simple username')

    if password:
        password = sys.stdin.read().strip()
    else:
        password = click.prompt('Simple password', hide_input=True)

    # # Log in
    api = simplebank.Api()
    if not api.login(username, password):
        print("Unable to log in with the username and password you supplied")
        exit(1)

    # Get outputter
    ctx.obj['output'] = get_outputter(output_format)
    ctx.obj['api'] = api


@cli.command(help='Show your bank balances')
@click.help_option('-h')
@click.pass_obj
def balances(ctx):
    output = ctx['output']
    api = ctx['api']

    output(api.balances())
    return 0


@cli.command(help='Show information about your card')
@click.help_option('-h')
@click.pass_obj
def card(ctx):
    output = ctx['output']
    api = ctx['api']

    output(api.card())
    return 0


@cli.command(help='Show your upcoming payments')
@click.help_option('-h')
@click.pass_obj
def payments(ctx):
    output = ctx['output']
    api = ctx['api']

    output(api.payments())

    return 0


@cli.command(help='Show your latest transactions')
@click.option('-n', 'num',
              help='Fetch these many transactions',
              default=10,
              type=int)
@click.option('-f', 'follow',
              help="Display transactions as they're made",
              is_flag=True)
@click.help_option('-h')
@click.pass_obj
def tail(ctx, num, follow):
    output = ctx['output']
    api = ctx['api']

    # Get transactions
    data = api.transactions()
    transactions = data['transactions'][:num]
    transactions = sorted(transactions, key=lambda x: x['times']['when_received'])
    new_timestamp = data['timestamp']

    output(transactions)

    if follow:
        try:
            # [todo] Find a way that doesn't involve hitting new_transactions
            #   /api/notifications looks interesting, maybe that's what we need?
            while True:
                time.sleep(30)
                data = api.transactions(start=new_timestamp)

                if data['transactions']:
                    output(data['transactions'])

                new_timestamp = data['timestamp']
        except KeyboardInterrupt:
            pass    # ignore, just stop

    return 0


@cli.command(help='Show your goals')
@click.option('--archived', help="Show archived goals", is_flag=True)
@click.option('--completed', help="Shop completed goals", is_flag=True)
@click.help_option('-h')
@click.pass_obj
def goals(ctx, archived, completed):
    output = ctx['output']
    api = ctx['api']

    data = api.goals()

    if not archived:
        data = filter(lambda g: not g['archived'], data)
    if not completed:
        data = filter(lambda g: not g.is_completed(), data)

    # Show completed/archived first
    data = sorted(data, key=lambda g: g.is_completed() or g['archived'], reverse=True)

    output(list(data))
    return 0


def get_outputter(method):
    if method == 'json':
        return lambda x: click.echo(json.dumps(x))
    elif method == 'pprint':
        return pprint
    elif method == 'raw':
        return click.echo
    elif method == 'human':
        def human_print(data):
            if isinstance(data, list):
                for thing in data:
                    click.echo(str(thing))
            else:
                click.echo(str(data))

        return human_print
    else:
        raise Exception("Unknown format: ".format(method))


if __name__ == '__main__':
    exit(cli(obj={}))
